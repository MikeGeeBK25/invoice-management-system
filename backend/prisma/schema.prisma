// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  firstName         String
  lastName          String
  password          String
  role              UserRole @default(USER)
  approvalLimit     Decimal? @db.Decimal(12, 2)
  isActive          Boolean  @default(true)
  lastLogin         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  createdInvoices   Invoice[] @relation("InvoiceCreator")
  assignedInvoices  Invoice[] @relation("InvoiceAssignee")
  approvalActions   ApprovalAction[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Vendor {
  id                String       @id @default(cuid())
  name              String
  email             String?
  phone             String?
  address           String?
  taxId             String?      @unique
  website           String?
  contactPerson     String?
  paymentTerms      String?
  approvalStatus    ApprovalStatus @default(PENDING)
  riskScore         Int?         @default(0)
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  invoices          Invoice[]
  purchaseOrders    PurchaseOrder[]

  @@map("vendors")
}

model Invoice {
  id                String         @id @default(cuid())
  invoiceNumber     String         @unique
  poNumber          String?
  vendorId          String
  createdById       String
  assignedToId      String?
  amount            Decimal        @db.Decimal(12, 2)
  taxAmount         Decimal?       @db.Decimal(12, 2)
  totalAmount       Decimal        @db.Decimal(12, 2)
  currency          String         @default("USD")
  invoiceDate       DateTime
  dueDate           DateTime
  description       String?
  status            InvoiceStatus  @default(PENDING)
  priority          PriorityLevel  @default(MEDIUM)
  paymentMethod     String?
  paymentReference  String?
  notes             String?
  attachments       String[]       @default([])
  extractedData     Json?
  isRecurring       Boolean        @default(false)
  recurringPattern  String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  vendor            Vendor         @relation(fields: [vendorId], references: [id])
  createdBy         User           @relation("InvoiceCreator", fields: [createdById], references: [id])
  assignedTo        User?          @relation("InvoiceAssignee", fields: [assignedToId], references: [id])
  approvalActions   ApprovalAction[]
  auditLogs         AuditLog[]
  lineItems         InvoiceLineItem[]
  purchaseOrder     PurchaseOrder? @relation(fields: [poNumber], references: [poNumber])

  @@map("invoices")
}

model InvoiceLineItem {
  id                String   @id @default(cuid())
  invoiceId         String
  description       String
  quantity          Decimal  @db.Decimal(10, 2)
  unitPrice         Decimal  @db.Decimal(12, 2)
  totalPrice        Decimal  @db.Decimal(12, 2)
  category          String?
  accountCode       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  invoice           Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

model PurchaseOrder {
  id                String   @id @default(cuid())
  poNumber          String   @unique
  vendorId          String
  amount            Decimal  @db.Decimal(12, 2)
  status            String   @default("OPEN")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vendor            Vendor   @relation(fields: [vendorId], references: [id])
  invoices          Invoice[]

  @@map("purchase_orders")
}

model ApprovalAction {
  id                String         @id @default(cuid())
  invoiceId         String
  userId            String
  action            WorkflowAction
  comments          String?
  level             Int            @default(1)
  isRequired        Boolean        @default(true)
  completedAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  invoice           Invoice        @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [userId], references: [id])

  @@map("approval_actions")
}

model AuditLog {
  id                String   @id @default(cuid())
  entityType        String
  entityId          String
  action            String
  userId            String?
  oldValues         Json?
  newValues         Json?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime @default(now())

  // Relations
  user              User?    @relation(fields: [userId], references: [id])
  invoice           Invoice? @relation(fields: [entityId], references: [id])

  @@map("audit_logs")
}

model Settings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             String
  description       String?
  isPublic          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("settings")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum InvoiceStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WorkflowAction {
  SUBMIT
  APPROVE
  REJECT
  REQUEST_INFO
  ESCALATE
}